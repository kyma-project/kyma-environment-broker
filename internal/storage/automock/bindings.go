// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	internal "github.com/kyma-project/kyma-environment-broker/internal"
	mock "github.com/stretchr/testify/mock"
)

// Bindings is an autogenerated mock type for the Bindings type
type Bindings struct {
	mock.Mock
}

// Delete provides a mock function with given fields: instanceID, bindingID
func (_m *Bindings) Delete(instanceID string, bindingID string) error {
	ret := _m.Called(instanceID, bindingID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(instanceID, bindingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: instanceID, bindingID
func (_m *Bindings) Get(instanceID string, bindingID string) (*internal.Binding, error) {
	ret := _m.Called(instanceID, bindingID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *internal.Binding
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*internal.Binding, error)); ok {
		return rf(instanceID, bindingID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *internal.Binding); ok {
		r0 = rf(instanceID, bindingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Binding)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instanceID, bindingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get2 provides a mock function with given fields: instanceID, bindingID
func (_m *Bindings) Get2(instanceID string, bindingID string) (*internal.Binding, error) {
	ret := _m.Called(instanceID, bindingID)

	if len(ret) == 0 {
		panic("no return value specified for Get2")
	}

	var r0 *internal.Binding
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*internal.Binding, error)); ok {
		return rf(instanceID, bindingID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *internal.Binding); ok {
		r0 = rf(instanceID, bindingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Binding)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instanceID, bindingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: binding
func (_m *Bindings) Insert(binding *internal.Binding) error {
	ret := _m.Called(binding)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*internal.Binding) error); ok {
		r0 = rf(binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByInstanceID provides a mock function with given fields: instanceID
func (_m *Bindings) ListByInstanceID(instanceID string) ([]internal.Binding, error) {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for ListByInstanceID")
	}

	var r0 []internal.Binding
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]internal.Binding, error)); ok {
		return rf(instanceID)
	}
	if rf, ok := ret.Get(0).(func(string) []internal.Binding); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Binding)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBindings creates a new instance of Bindings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBindings(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bindings {
	mock := &Bindings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
