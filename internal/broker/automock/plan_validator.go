// Code generated by mockery v2.43.0. DO NOT EDIT.

package automock

import (
	runtime "github.com/kyma-project/kyma-environment-broker/common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// PlanValidator is an autogenerated mock type for the PlanValidator type
type PlanValidator struct {
	mock.Mock
}

// GetDefaultOIDC provides a mock function with given fields:
func (_m *PlanValidator) GetDefaultOIDC() *runtime.OIDCConfigDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultOIDC")
	}

	var r0 *runtime.OIDCConfigDTO
	if rf, ok := ret.Get(0).(func() *runtime.OIDCConfigDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.OIDCConfigDTO)
		}
	}

	return r0
}

// IsPlanSupport provides a mock function with given fields: planID
func (_m *PlanValidator) IsPlanSupport(planID string) bool {
	ret := _m.Called(planID)

	if len(ret) == 0 {
		panic("no return value specified for IsPlanSupport")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(planID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewPlanValidator creates a new instance of PlanValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlanValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlanValidator {
	mock := &PlanValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
