// Code generated by mockery v2.43.0. DO NOT EDIT.

package automock

import (
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	internal "github.com/kyma-project/kyma-environment-broker/internal"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/kyma-project/kyma-environment-broker/common/runtime"
)

// CreatorForPlan is an autogenerated mock type for the CreatorForPlan type
type CreatorForPlan struct {
	mock.Mock
}

// CreateProvisionInput provides a mock function with given fields: parameters
func (_m *CreatorForPlan) CreateProvisionInput(parameters internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error) {
	ret := _m.Called(parameters)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisionInput")
	}

	var r0 internal.ProvisionerInputCreator
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error)); ok {
		return rf(parameters)
	}
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) internal.ProvisionerInputCreator); ok {
		r0 = rf(parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.ProvisioningParameters) error); ok {
		r1 = rf(parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpgradeInput provides a mock function with given fields: parameters
func (_m *CreatorForPlan) CreateUpgradeInput(parameters internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error) {
	ret := _m.Called(parameters)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpgradeInput")
	}

	var r0 internal.ProvisionerInputCreator
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error)); ok {
		return rf(parameters)
	}
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) internal.ProvisionerInputCreator); ok {
		r0 = rf(parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.ProvisioningParameters) error); ok {
		r1 = rf(parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpgradeShootInput provides a mock function with given fields: parameters
func (_m *CreatorForPlan) CreateUpgradeShootInput(parameters internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error) {
	ret := _m.Called(parameters)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpgradeShootInput")
	}

	var r0 internal.ProvisionerInputCreator
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) (internal.ProvisionerInputCreator, error)); ok {
		return rf(parameters)
	}
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) internal.ProvisionerInputCreator); ok {
		r0 = rf(parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.ProvisioningParameters) error); ok {
		r1 = rf(parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanDefaults provides a mock function with given fields: planID, platformProvider, parametersProvider
func (_m *CreatorForPlan) GetPlanDefaults(planID string, platformProvider runtime.CloudProvider, parametersProvider *runtime.CloudProvider) (*gqlschema.ClusterConfigInput, error) {
	ret := _m.Called(planID, platformProvider, parametersProvider)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanDefaults")
	}

	var r0 *gqlschema.ClusterConfigInput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, runtime.CloudProvider, *runtime.CloudProvider) (*gqlschema.ClusterConfigInput, error)); ok {
		return rf(planID, platformProvider, parametersProvider)
	}
	if rf, ok := ret.Get(0).(func(string, runtime.CloudProvider, *runtime.CloudProvider) *gqlschema.ClusterConfigInput); ok {
		r0 = rf(planID, platformProvider, parametersProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.ClusterConfigInput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, runtime.CloudProvider, *runtime.CloudProvider) error); ok {
		r1 = rf(planID, platformProvider, parametersProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPlanSupport provides a mock function with given fields: planID
func (_m *CreatorForPlan) IsPlanSupport(planID string) bool {
	ret := _m.Called(planID)

	if len(ret) == 0 {
		panic("no return value specified for IsPlanSupport")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(planID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCreatorForPlan creates a new instance of CreatorForPlan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreatorForPlan(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreatorForPlan {
	mock := &CreatorForPlan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
