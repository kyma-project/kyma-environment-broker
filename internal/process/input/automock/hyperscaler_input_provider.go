// Code generated by mockery v2.43.0. DO NOT EDIT.

package automock

import (
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	internal "github.com/kyma-project/kyma-environment-broker/internal"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/kyma-project/kyma-environment-broker/common/runtime"
)

// HyperscalerInputProvider is an autogenerated mock type for the HyperscalerInputProvider type
type HyperscalerInputProvider struct {
	mock.Mock
}

// ApplyParameters provides a mock function with given fields: _a0, params
func (_m *HyperscalerInputProvider) ApplyParameters(_a0 *gqlschema.ClusterConfigInput, params internal.ProvisioningParameters) {
	_m.Called(_a0, params)
}

// Defaults provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Defaults() *gqlschema.ClusterConfigInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Defaults")
	}

	var r0 *gqlschema.ClusterConfigInput
	if rf, ok := ret.Get(0).(func() *gqlschema.ClusterConfigInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.ClusterConfigInput)
		}
	}

	return r0
}

// Profile provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Profile() gqlschema.KymaProfile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Profile")
	}

	var r0 gqlschema.KymaProfile
	if rf, ok := ret.Get(0).(func() gqlschema.KymaProfile); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gqlschema.KymaProfile)
	}

	return r0
}

// Provider provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Provider() runtime.CloudProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 runtime.CloudProvider
	if rf, ok := ret.Get(0).(func() runtime.CloudProvider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(runtime.CloudProvider)
	}

	return r0
}

// NewHyperscalerInputProvider creates a new instance of HyperscalerInputProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHyperscalerInputProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *HyperscalerInputProvider {
	mock := &HyperscalerInputProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
