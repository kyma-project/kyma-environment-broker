{{ if .Values.subaccountCleanup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "{{- .Values.subaccountCleanup.nameV2 -}}"
spec:
  schedule: "{{ .Values.subaccountCleanup.schedule }}"
  failedJobsHistoryLimit: 5
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 60
  jobTemplate:
    metadata:
      labels:
        cronjob: subaccount-cleaner-v2.0
    spec:
      backoffLimit: {{ .Values.cis.v2.jobRetries }}
      template:
        metadata:
          labels:
            cronjob: subaccount-cleaner-v2.0
        spec:
          serviceAccountName: {{ .Values.global.kyma_environment_broker.serviceAccountName }}
          restartPolicy: OnFailure
          shareProcessNamespace: true
          {{- with .Values.deployment.securityContext }}
          securityContext:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - name: cleaner
              image: "{{ .Values.global.images.container_registry.path }}/{{ .Values.global.images.kyma_environment_broker.dir }}kyma-environment-subaccount-cleanup-job:{{ .Values.global.images.kyma_environments_subaccount_cleanup_job.version }}"
              imagePullPolicy: IfNotPresent
              env:
                - name: APP_BROKER_URL
                  value: "http://{{ include "kyma-env-broker.fullname" . }}"
                - name: APP_CIS_AUTH_URL
                  value: {{ .Values.cis.v2.authURL }}
                - name: APP_CIS_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.cis.v2.secretName }}
                      key: {{ .Values.cis.v2.clientIdKey }}
                - name: APP_CIS_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.cis.v2.secretName }}
                      key: {{ .Values.cis.v2.secretKey }}
                - name: APP_CIS_EVENT_SERVICE_URL
                  value: {{ .Values.cis.v2.eventServiceURL }}
                - name: APP_CIS_MAX_REQUEST_RETRIES
                  value: {{ .Values.cis.v2.maxRequestRetries | quote }}
                - name: APP_CIS_RATE_LIMITING_INTERVAL
                  value: {{ .Values.cis.v2.rateLimitingInterval | quote }}
                - name: APP_CIS_REQUEST_INTERVAL
                  value: {{ .Values.cis.v2.requestInterval | quote }}
                - name: APP_CLIENT_VERSION
                  value: "{{ .Values.subaccountCleanup.clientV2VersionName }}"
                - name: APP_DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.hostSecretKey }}
                - name: APP_DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.nameSecretKey }}
                - name: APP_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.passwordSecretKey }}
                - name: APP_DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.portSecretKey }}
                - name: APP_DATABASE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.global.database.managedGCP.encryptionSecretName }}"
                      key: {{ .Values.global.database.managedGCP.encryptionSecretKey }}
                      optional: true
                - name: APP_DATABASE_SSLMODE
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.sslModeSecretKey }}
                - name: APP_DATABASE_SSLROOTCERT
                  value: "{{ .Values.configPaths.cloudsqlSSLRootCert }}"
                - name: APP_DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.database.managedGCP.secretName }}
                      key: {{ .Values.global.database.managedGCP.userNameSecretKey }}
                - name: DATABASE_EMBEDDED
                  value: "{{ .Values.global.database.embedded.enabled }}"
              command:
                - "/bin/main"
              volumeMounts:
              {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
              - name: cloudsql-sslrootcert
                mountPath: /secrets/cloudsql-sslrootcert
                readOnly: true
              {{- end}}
            {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true)}}
            - name: cloudsql-proxy
              image: {{ .Values.global.images.cloudsql_proxy.repository }}:{{ .Values.global.images.cloudsql_proxy.tag }}
              {{- if .Values.global.database.cloudsqlproxy.workloadIdentity.enabled }}
              command: ["/cloud-sql-proxy",
                        "{{ .Values.global.database.managedGCP.instanceConnectionName }}",
                        "--exit-zero-on-sigterm",
                        "--private-ip"]
              {{- else }}
              command: ["/cloud-sql-proxy",
                        "{{ .Values.global.database.managedGCP.instanceConnectionName }}",
                        "--private-ip",
                        "--exit-zero-on-sigterm",
                        "--credentials-file=/secrets/cloudsql-instance-credentials/credentials.json"]
              volumeMounts:
                - name: cloudsql-instance-credentials
                  mountPath: /secrets/cloudsql-instance-credentials
                  readOnly: true
              {{- end }}
              {{- with .Values.deployment.securityContext }}
              securityContext:
                {{ toYaml . | nindent 16 }}
              {{- end }}
            {{- end}}

          volumes:
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true) (eq .Values.global.database.cloudsqlproxy.workloadIdentity.enabled false)}}
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
          {{- end}}
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
            - name: cloudsql-sslrootcert
              secret:
                secretName: kcp-postgresql
                items: 
                - key: postgresql-sslRootCert
                  path: server-ca.pem
                optional: true
          {{- end}}
{{ end }}
