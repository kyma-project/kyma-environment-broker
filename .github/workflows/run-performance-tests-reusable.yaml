name: Run performance tests (reusable)

on:
  workflow_call:
    inputs:
      release:
        description: 'Determines if the workflow is called from release'
        default: "true"
        type: string
      version:
        description: 'Release version'
        default: "0.0.0.0"
        type: string
      instances-number:
        description: number of instances to be provisioned
        default: 100
        type: number
      updates-number:
        description: number of updates on a single instance
        default: 300
        type: number
      kim-delay-seconds:
        description: time to wait before transitioning the runtime CR to the Ready state
        default: 0
        type: number
      provisioning-max-step-processing-time:
        description: max time to process a step in provisioning queue
        default: 30s
        type: string
      provisioning-workers-amount:
        description: amount of workers in provisioning queue
        default: 25
        type: number
      update-max-step-processing-time:
        description: max time to process a step in update queue
        default: 30s
        type: string
      update-workers-amount:
        description: amount of workers in update queue
        default: 25
        type: number
      deprovisioning-max-step-processing-time:
        description: max time to process a step in deprovisioning queue
        default: 30s
        type: string
      deprovisioning-workers-amount:
        description: amount of workers in deprovisioning queue
        default: 25
        type: number

jobs:
  prepare-tests:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.k3s_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: get-version
        name: Get K3s version
        run: |
          VERSION=($(./scripts/testing/get-latest-k3s-releases.sh 1 | jq -r))
          echo "k3s_version=${VERSION}" >> "${GITHUB_OUTPUT}"
      - name: Wait for images to be ready
        uses: wechuli/allcheckspassed@2e5e8bbc775f5680ed5d02e3a22e2fc7219792ac
        if: ${{ inputs.release == 'false' }}
        with:
          delay: '1'
          retries: '15'
          polling_interval: '1'
          checks_include: 'kyma-environment-broker-image / Build image, environments-cleanup-image / Build image, deprovision-retrigger-image / Build image, expirator-image / Build image, runtime-reconciler-image / Build image, subaccount-cleanup-image / Build image, subaccount-sync-image / Build image, globalaccounts-image / Build image, schema-migrator-image / Build image, service-binding-cleanup-image / Build image'
          verbose: true

  run-concurrent-provisioning-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"
        
      - name: Prepare values.yaml
        run: |
          yq e ".provisioning.maxStepProcessingTime = \"${{ inputs.provisioning-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".provisioning.workersAmount = ${{ inputs.provisioning-workers-amount }}" -i resources/keb/values.yaml

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi

      - name: Populate database
        run: |
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)
          
          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          PORT_FORWARD_PID=$!
          echo $PORT_FORWARD_PID
          sleep 5
          
          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql
          
          kill $PORT_FORWARD_PID
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Provision instances
        run: |
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url http://localhost:30080/oauth/v2/service_instances/$uid \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-cluster\",\"region\":\"northeurope\"}}"
          done
          
          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=azure \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi
      
      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: ${{ inputs.kim-delay-seconds }}
        run: scripts/simulate_kim.sh
        
      - name: Fetch metrics
        run: |          
          METRICS=$(curl -s http://localhost:30080/metrics)
          
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_provisioning_succeeded_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_provisioning_failed_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            SUCCESS_RATE=0
          else
            SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of provisioning requests: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          
          PROVISIONING_DURATION=$(echo "$METRICS" | grep 'kcp_keb_v2_provisioning_duration_minutes_sum{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          PROVISIONING_DURATION=${PROVISIONING_DURATION:-0}
          PROVISIONING_COUNT=$(echo "$METRICS" | grep 'kcp_keb_v2_provisioning_duration_minutes_count{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          PROVISIONING_COUNT=${PROVISIONING_COUNT:-0}
          if [ "$PROVISIONING_COUNT" -eq 0 ]; then
            AVG_PROVISIONING_DURATION=0
          else
            AVG_PROVISIONING_DURATION=$(awk "BEGIN {printf \"%.2f\", ($PROVISIONING_DURATION / $PROVISIONING_COUNT)}")
          fi
          echo "Average duration of provisioning requests: $AVG_PROVISIONING_DURATION minutes" >> $GITHUB_STEP_SUMMARY
          
          scripts/generate_charts.sh
          
          if [[ "$SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: SUCCESS_RATE is $SUCCESS_RATE, expected 100.00"
            exit 1
          fi

  run-concurrent-update-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"

      - name: Prepare values.yaml
        run: |
          yq e ".provisioning.maxStepProcessingTime = \"10s\"" -i resources/keb/values.yaml
          yq e ".provisioning.workersAmount = 100" -i resources/keb/values.yaml
          yq e ".update.maxStepProcessingTime = \"${{ inputs.update-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".update.workersAmount = ${{ inputs.update-workers-amount }}" -i resources/keb/values.yaml

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi

      - name: Populate database
        run: |
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)

          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          PORT_FORWARD_PID=$!
          echo $PORT_FORWARD_PID
          sleep 5

          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql

          kill $PORT_FORWARD_PID
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Provision instances
        run: |
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url http://localhost:30080/oauth/v2/service_instances/$uid \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-cluster\",\"region\":\"northeurope\"}}"
          done

          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=azure \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi

      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: 0
        run: |
          scripts/simulate_kim.sh
          
          RESPONSE_JSON=$(curl --request GET \
            --url "http://localhost:30080/runtimes?plan=azure&state=succeeded" \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16')
          SUCCEEDED_TOTAL_COUNT=$(echo "$RESPONSE_JSON" | jq .totalCount)

          if [ "$SUCCEEDED_TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $SUCCEEDED_TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $SUCCEEDED_TOTAL_COUNT"
            exit 1
          fi
        
      - name: Update instances
        timeout-minutes: 60
        run: |
          PAGE=1
          
          while true; do
            RESPONSE=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure&page=$PAGE" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16')
          
            COUNT=$(echo "$RESPONSE" | jq '.count')
            if [ "$COUNT" -eq 0 ]; then
              break
            fi
          
            echo "$RESPONSE" | jq -r '.data[].instanceID' | while read -r INSTANCE_ID; do
              curl --request PATCH \
                --url "http://localhost:30080/oauth/v2/service_instances/$INSTANCE_ID?accepts_incomplete=true" \
                --header "Content-Type: application/json" \
                --header "X-Broker-API-Version: 2.16" \
                --data '{"service_id":"47c9dcbf-ff30-448e-ab36-d3bad66ba281","plan_id":"4deee563-e5ec-4731-b9b1-53b42d855f0c","context":{"globalaccount_id":"2f5011af-2fd3-44ba-ac60-eeb1148c2995","subaccount_id":"8b9a0db4-9aef-4da2-a856-61a4420b66fd","user_id":"user@email.com"},"parameters":{"autoScalerMax":15}}'
            done
          
            PAGE=$((PAGE + 1))
          done
          
          while true; do
            UPDATED_COUNT=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure&state=succeeded,failed" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16' | jq .totalCount)
          
            if [ "$UPDATED_COUNT" -eq "${{ inputs.instances-number }}" ]; then
              echo "All instances are updated. Done."
              break
            fi
          
            sleep 10
          done
        
      - name: Fetch metrics
        run: |
          sleep 15
          
          METRICS=$(curl -s http://localhost:30080/metrics)
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c".*state="succeeded".*type="update"' | wc -l | xargs)
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c".*state="failed".*type="update"' | wc -l | xargs)
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            SUCCESS_RATE=0
          else
            SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of update requests: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          
          scripts/generate_charts.sh
          
          if [[ "$SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: SUCCESS_RATE is $SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
  run-multiple-updates-on-a-single-instance-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"

      - name: Prepare values.yaml
        run: |
          yq e ".update.maxStepProcessingTime = \"${{ inputs.update-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".update.workersAmount = ${{ inputs.update-workers-amount }}" -i resources/keb/values.yaml

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi

      - name: Populate database
        run: |
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)

          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          PORT_FORWARD_PID=$!
          echo $PORT_FORWARD_PID
          sleep 5

          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql

          kill $PORT_FORWARD_PID
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Provision the instance
        run: |
          curl --request PUT \
            --url http://localhost:30080/oauth/v2/service_instances/azure-cluster \
            --header "Content-Type: application/json" \
            --header "X-Broker-API-Version: 2.16" \
            --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-cluster\",\"region\":\"northeurope\"}}"

      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: 0
        run: |
          scripts/simulate_kim.sh

          INSTANCE_JSON=$(curl --request GET \
            --url "http://localhost:30080/runtimes?instance_id=azure-cluster" \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16')
          INSTANCE_STATE=$(echo "$INSTANCE_JSON" | jq '.data[0].status.state')

          if [ "$INSTANCE_STATE" = '"succeeded"' ]; then
            echo "Assertion passed: state is $INSTANCE_STATE"
          else
            echo "Assertion failed: state is not 'succeeded'. Actual value: $INSTANCE_STATE"
            exit 1
          fi

      - name: Update the instance
        timeout-minutes: 60
        run: |
          max=5
          for i in $(seq 1 ${{ inputs.updates-number }}); do
            curl --request PATCH \
              --url "http://localhost:30080/oauth/v2/service_instances/azure-cluster?accepts_incomplete=true" \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"autoScalerMax\":$max}}"
    
            max=$((max + 1))
            if [ "$max" -gt 100 ]; then
              max=5
            fi
          done
          
          while true; do
            INSTANCE_STATE=$(curl --request GET \
              --url "http://localhost:30080/runtimes?instance_id=azure-cluster" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16' | jq '.data[0].status.state')

            if [ "$INSTANCE_STATE" = '"succeeded"' ]; then
              echo "Instance is updated. Done."
              break
            fi

            sleep 10
          done

      - name: Fetch metrics
        run: |
          sleep 15

          METRICS=$(curl -s http://localhost:30080/metrics)
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c".*state="succeeded".*type="update"' | wc -l | xargs)
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c".*state="failed".*type="update"' | wc -l | xargs)
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            SUCCESS_RATE=0
          else
            SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of update requests: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY

          scripts/generate_charts.sh
          
          if [[ "$SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: SUCCESS_RATE is $SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
  run-concurrent-deprovisoning-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"

      - name: Prepare values.yaml
        run: |
          yq e ".provisioning.maxStepProcessingTime = \"10s\"" -i resources/keb/values.yaml
          yq e ".provisioning.workersAmount = 100" -i resources/keb/values.yaml
          yq e ".deprovisioning.maxStepProcessingTime = \"${{ inputs.deprovisioning-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".deprovisioning.workersAmount = ${{ inputs.deprovisioning-workers-amount }}" -i resources/keb/values.yaml

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi

      - name: Populate database
        run: |
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)

          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          PORT_FORWARD_PID=$!
          echo $PORT_FORWARD_PID
          sleep 5

          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql

          kill $PORT_FORWARD_PID
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Provision instances
        run: |
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url http://localhost:30080/oauth/v2/service_instances/$uid \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-cluster\",\"region\":\"northeurope\"}}"
          done

          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=azure \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi

      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: 0
        run: |
          scripts/simulate_kim.sh

          RESPONSE_JSON=$(curl --request GET \
            --url "http://localhost:30080/runtimes?plan=azure&state=succeeded" \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16')
          SUCCEEDED_TOTAL_COUNT=$(echo "$RESPONSE_JSON" | jq .totalCount)

          if [ "$SUCCEEDED_TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $SUCCEEDED_TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $SUCCEEDED_TOTAL_COUNT"
            exit 1
          fi

      - name: Deprovision instances
        timeout-minutes: 60
        run: |
          PAGE=1

          while true; do
            RESPONSE=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure&page=$PAGE" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16')

            COUNT=$(echo "$RESPONSE" | jq '.count')
            if [ "$COUNT" -eq 0 ]; then
              break
            fi

            echo "$RESPONSE" | jq -r '.data[].instanceID' | while read -r INSTANCE_ID; do
              curl --request DELETE \
                --url "http://localhost:30080/oauth/v2/service_instances/$INSTANCE_ID?accepts_incomplete=true&service_id=47c9dcbf-ff30-448e-ab36-d3bad66ba281&plan_id=4deee563-e5ec-4731-b9b1-53b42d855f0c" \
                --header "Content-Type: application/json" \
                --header "X-Broker-API-Version: 2.16" \
                --data '{"service_id":"47c9dcbf-ff30-448e-ab36-d3bad66ba281","plan_id":"4deee563-e5ec-4731-b9b1-53b42d855f0c","context":{"globalaccount_id":"2f5011af-2fd3-44ba-ac60-eeb1148c2995","subaccount_id":"8b9a0db4-9aef-4da2-a856-61a4420b66fd","user_id":"user@email.com"}}'
            done

            PAGE=$((PAGE + 1))
          done

          while true; do
            DEPROVISIONING_COUNT=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure&state=deprovisioning" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

            if [ "$DEPROVISIONING_COUNT" -eq 0 ]; then
              echo "All instances are deprovisioned. Done."
              break
            fi

            sleep 10
          done

      - name: Fetch metrics
        run: |
          METRICS=$(curl -s http://localhost:30080/metrics)
          
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_deprovisioning_succeeded_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_deprovisioning_failed_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            SUCCESS_RATE=0
          else
            SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of deprovisioning requests: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          
          DEPROVISIONING_DURATION=$(echo "$METRICS" | grep 'kcp_keb_v2_deprovisioning_duration_minutes_sum{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          DEPROVISIONING_DURATION=${DEPROVISIONING_DURATION:-0}
          DEPROVISIONING_COUNT=$(echo "$METRICS" | grep 'kcp_keb_v2_deprovisioning_duration_minutes_count{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          DEPROVISIONING_COUNT=${DEPROVISIONING_COUNT:-0}
          if [ "$DEPROVISIONING_COUNT" -eq 0 ]; then
            AVG_DEPROVISIONING_DURATION=0
          else
            AVG_DEPROVISIONING_DURATION=$(awk "BEGIN {printf \"%.2f\", ($DEPROVISIONING_DURATION / $DEPROVISIONING_COUNT)}")
          fi
          echo "Average duration of deprovisioning requests: $AVG_DEPROVISIONING_DURATION minutes" >> $GITHUB_STEP_SUMMARY

          scripts/generate_charts.sh
          
          if [[ "$SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: SUCCESS_RATE is $SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
  run-mixed-operations-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"

      - name: Prepare values.yaml
        run: |
          yq e ".provisioning.maxStepProcessingTime = \"${{ inputs.provisioning-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".provisioning.workersAmount = ${{ inputs.provisioning-workers-amount }}" -i resources/keb/values.yaml
          yq e ".update.maxStepProcessingTime = \"${{ inputs.update-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".update.workersAmount = ${{ inputs.update-workers-amount }}" -i resources/keb/values.yaml
          yq e ".deprovisioning.maxStepProcessingTime = \"${{ inputs.deprovisioning-max-step-processing-time }}\"" -i resources/keb/values.yaml
          yq e ".deprovisioning.workersAmount = ${{ inputs.deprovisioning-workers-amount }}" -i resources/keb/values.yaml

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi

      - name: Populate database
        run: |
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)

          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          PORT_FORWARD_PID=$!
          echo $PORT_FORWARD_PID
          sleep 5

          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql

          kill $PORT_FORWARD_PID
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Provision instances
        run: |
          # Instances for update
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url "http://localhost:30080/oauth/v2/service_instances/$uid" \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"8cb22518-aa26-44c5-91a0-e669ec9bf443\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-lite-cluster\",\"region\":\"northeurope\"}}"
          done

          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=azure_lite \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi
          
          # Instances for deprovisioning
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url http://localhost:30080/oauth/v2/service_instances/$uid \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"4deee563-e5ec-4731-b9b1-53b42d855f0c\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"azure-cluster\",\"region\":\"northeurope\"}}"
          done

          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=azure \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi
          
      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: 0
        run: |
          scripts/simulate_kim.sh
          
          RESPONSE_JSON=$(curl --request GET \
            --url "http://localhost:30080/runtimes?plan=azure_lite&state=succeeded" \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16')
          SUCCEEDED_TOTAL_COUNT=$(echo "$RESPONSE_JSON" | jq .totalCount)

          if [ "$SUCCEEDED_TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $SUCCEEDED_TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $SUCCEEDED_TOTAL_COUNT"
            exit 1
          fi
          
          RESPONSE_JSON=$(curl --request GET \
            --url "http://localhost:30080/runtimes?plan=azure&state=succeeded" \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16')
          SUCCEEDED_TOTAL_COUNT=$(echo "$RESPONSE_JSON" | jq .totalCount)

          if [ "$SUCCEEDED_TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $SUCCEEDED_TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $SUCCEEDED_TOTAL_COUNT"
            exit 1
          fi

      - name: Run mixed operations
        run: |
          # Provisioning requests
          for i in $(seq 1 ${{ inputs.instances-number }}); do
            uid=$(uuidgen)
            curl --request PUT \
              --url http://localhost:30080/oauth/v2/service_instances/$uid \
              --header "Content-Type: application/json" \
              --header "X-Broker-API-Version: 2.16" \
              --data "{\"service_id\":\"47c9dcbf-ff30-448e-ab36-d3bad66ba281\",\"plan_id\":\"ca6e5357-707f-4565-bbbd-b3ab732597c6\",\"context\":{\"globalaccount_id\":\"2f5011af-2fd3-44ba-ac60-eeb1148c2995\",\"subaccount_id\":\"8b9a0db4-9aef-4da2-a856-61a4420b66fd\",\"user_id\":\"user@email.com\"},\"parameters\":{\"name\":\"gcp-cluster\",\"region\":\"europe-west3\"}}"
          done

          TOTAL_COUNT=$(curl --request GET \
            --url http://localhost:30080/runtimes?plan=gcp \
            --header 'Content-Type: application/json' \
            --header 'X-Broker-API-Version: 2.16' | jq .totalCount)

          if [ "$TOTAL_COUNT" -eq "${{ inputs.instances-number }}" ]; then
            echo "Assertion passed: totalCount is $TOTAL_COUNT"
          else
            echo "Assertion failed: totalCount is not ${{ inputs.instances-number }}. Actual value: $TOTAL_COUNT"
            exit 1
          fi
          
          # Update requests
          PAGE=1
          while true; do
            RESPONSE=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure_lite&page=$PAGE" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16')

            COUNT=$(echo "$RESPONSE" | jq '.count')
            if [ "$COUNT" -eq 0 ]; then
              break
            fi

            echo "$RESPONSE" | jq -r '.data[].instanceID' | while read -r INSTANCE_ID; do
              curl --request PATCH \
                --url "http://localhost:30080/oauth/v2/service_instances/$INSTANCE_ID?accepts_incomplete=true" \
                --header "Content-Type: application/json" \
                --header "X-Broker-API-Version: 2.16" \
                --data '{"service_id":"47c9dcbf-ff30-448e-ab36-d3bad66ba281","plan_id":"8cb22518-aa26-44c5-91a0-e669ec9bf443","context":{"globalaccount_id":"2f5011af-2fd3-44ba-ac60-eeb1148c2995","subaccount_id":"8b9a0db4-9aef-4da2-a856-61a4420b66fd","user_id":"user@email.com"},"parameters":{"autoScalerMax":15}}'
            done

            PAGE=$((PAGE + 1))
          done
          
          # Deprovisioning requests
          PAGE=1
          while true; do
            RESPONSE=$(curl --request GET \
              --url "http://localhost:30080/runtimes?plan=azure&page=$PAGE" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16')

            COUNT=$(echo "$RESPONSE" | jq '.count')
            if [ "$COUNT" -eq 0 ]; then
              break
            fi

            echo "$RESPONSE" | jq -r '.data[].instanceID' | while read -r INSTANCE_ID; do
              curl --request DELETE \
                --url "http://localhost:30080/oauth/v2/service_instances/$INSTANCE_ID?accepts_incomplete=true&service_id=47c9dcbf-ff30-448e-ab36-d3bad66ba281&plan_id=4deee563-e5ec-4731-b9b1-53b42d855f0c" \
                --header "Content-Type: application/json" \
                --header "X-Broker-API-Version: 2.16" \
                --data '{"service_id":"47c9dcbf-ff30-448e-ab36-d3bad66ba281","plan_id":"4deee563-e5ec-4731-b9b1-53b42d855f0c","context":{"globalaccount_id":"2f5011af-2fd3-44ba-ac60-eeb1148c2995","subaccount_id":"8b9a0db4-9aef-4da2-a856-61a4420b66fd","user_id":"user@email.com"}}'
            done

            PAGE=$((PAGE + 1))
          done
          
      - name: Simulate KIM
        timeout-minutes: 60
        env:
          KIM_DELAY_SECONDS: ${{ inputs.kim-delay-seconds }}
        run: scripts/simulate_kim.sh
        
      - name: Fetch metrics
        run: |
          METRICS=$(curl -s http://localhost:30080/metrics)
          
          # Provisioning metrics

          echo "### Provisioning Requests" >> $GITHUB_STEP_SUMMARY
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_provisioning_succeeded_total{plan_id="ca6e5357-707f-4565-bbbd-b3ab732597c6"}' | awk '{print $2}')
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_provisioning_failed_total{plan_id="ca6e5357-707f-4565-bbbd-b3ab732597c6"}' | awk '{print $2}')
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            PROVISIONING_SUCCESS_RATE=0
          else
            PROVISIONING_SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of provisioning requests: $PROVISIONING_SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY

          PROVISIONING_DURATION=$(echo "$METRICS" | grep 'kcp_keb_v2_provisioning_duration_minutes_sum{plan_id="ca6e5357-707f-4565-bbbd-b3ab732597c6"}' | awk '{print $2}')
          PROVISIONING_DURATION=${PROVISIONING_DURATION:-0}
          PROVISIONING_COUNT=$(echo "$METRICS" | grep 'kcp_keb_v2_provisioning_duration_minutes_count{plan_id="ca6e5357-707f-4565-bbbd-b3ab732597c6"}' | awk '{print $2}')
          PROVISIONING_COUNT=${PROVISIONING_COUNT:-0}
          if [ "$PROVISIONING_COUNT" -eq 0 ]; then
            AVG_PROVISIONING_DURATION=0
          else
            AVG_PROVISIONING_DURATION=$(awk "BEGIN {printf \"%.2f\", ($PROVISIONING_DURATION / $PROVISIONING_COUNT)}")
          fi
          echo "Average duration of provisioning requests: $AVG_PROVISIONING_DURATION minutes" >> $GITHUB_STEP_SUMMARY
          
          # Update metrics
          
          echo "### Update Requests" >> $GITHUB_STEP_SUMMARY
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="8cb22518-aa26-44c5-91a0-e669ec9bf443".*state="succeeded".*type="update"' | wc -l | xargs)
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operation_result.*plan_id="8cb22518-aa26-44c5-91a0-e669ec9bf443".*state="failed".*type="update"' | wc -l | xargs)
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            UPDATE_SUCCESS_RATE=0
          else
            UPDATE_SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of update requests: $UPDATE_SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          
          # Deprovisioning metrics
          
          echo "### Deprovisioning Requests" >> $GITHUB_STEP_SUMMARY
          SUCCEEDED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_deprovisioning_succeeded_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          SUCCEEDED_TOTAL=${SUCCEEDED_TOTAL:-0}
          FAILED_TOTAL=$(echo "$METRICS" | grep 'kcp_keb_v2_operations_deprovisioning_failed_total{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          FAILED_TOTAL=${FAILED_TOTAL:-0}
          TOTAL=$(echo "$SUCCEEDED_TOTAL + $FAILED_TOTAL" | bc)
          if [ "$TOTAL" -eq 0 ]; then
            DEPROVISIONING_SUCCESS_RATE=0
          else
            DEPROVISIONING_SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCEEDED_TOTAL / $TOTAL) * 100}")
          fi
          echo "Success rate of deprovisioning requests: $DEPROVISIONING_SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          
          DEPROVISIONING_DURATION=$(echo "$METRICS" | grep 'kcp_keb_v2_deprovisioning_duration_minutes_sum{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          DEPROVISIONING_DURATION=${DEPROVISIONING_DURATION:-0}
          DEPROVISIONING_COUNT=$(echo "$METRICS" | grep 'kcp_keb_v2_deprovisioning_duration_minutes_count{plan_id="4deee563-e5ec-4731-b9b1-53b42d855f0c"}' | awk '{print $2}')
          DEPROVISIONING_COUNT=${DEPROVISIONING_COUNT:-0}
          if [ "$DEPROVISIONING_COUNT" -eq 0 ]; then
            AVG_DEPROVISIONING_DURATION=0
          else
            AVG_DEPROVISIONING_DURATION=$(awk "BEGIN {printf \"%.2f\", ($DEPROVISIONING_DURATION / $DEPROVISIONING_COUNT)}")
          fi
          echo "Average duration of deprovisioning requests: $AVG_DEPROVISIONING_DURATION minutes" >> $GITHUB_STEP_SUMMARY

          scripts/generate_charts.sh
          
          if [[ "$PROVISIONING_SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: PROVISIONING_SUCCESS_RATE is $PROVISIONING_SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
          if [[ "$UPDATE_SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: UPDATE_SUCCESS_RATE is $UPDATE_SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
          if [[ "$DEPROVISIONING_SUCCESS_RATE" != "100.00" ]]; then
            echo "Error: DEPROVISIONING_SUCCESS_RATE is $DEPROVISIONING_SUCCESS_RATE, expected 100.00"
            exit 1
          fi
          
  run-runtimes-endpoint-test:
    runs-on: ubuntu-latest
    needs: prepare-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare K3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh ${{ needs.prepare-tests.outputs.version }} --wait"

      - name: Install KEB chart
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            make install VERSION=${{ inputs.version }}
          else
            make install VERSION=PR-${{ inputs.version }}
          fi
          
      - name: Start metrics collector
        run: |
          nohup bash scripts/monitor_metrics.sh > /dev/null 2>&1 &
          echo $! > /tmp/metrics_pid

      - name: Fetch runtimes using GET endpoint
        run: |
          kubectl port-forward -n kcp-system deployment/postgres 5432:5432 &
          sleep 5
          
          DB_NAME=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-db-name}" | base64 -d)
          DB_USER=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-username}" | base64 -d)
          DB_PASS=$(kubectl get secret kcp-postgresql -n kcp-system -o jsonpath="{.data.postgresql-broker-password}" | base64 -d)
          
          PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql
          
          SUCCESS_COUNT=0
          for i in {1..100}; do
            STATUS_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null \
              --request GET \
              --url "http://localhost:30080/runtimes" \
              --header 'Content-Type: application/json' \
              --header 'X-Broker-API-Version: 2.16')
            if [[ "$STATUS_CODE" == "200" ]]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          done
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / 100))
          echo "Success rate of runtimes requests: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY

          echo "<div align=\"center\">" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Number of Instances | Average Time per Page | Maximum Time per Page |" >> $GITHUB_STEP_SUMMARY
          echo "| :---: | :---: | :---: |" >> $GITHUB_STEP_SUMMARY

          fetch_and_measure() {
            local num_instances=$1
            local pages=$2

            TOTAL_TIME=0
            MAX_TIME=0

            for PAGE in $(seq 1 $pages); do
              START=$(date +%s%3N)
              curl --silent --request GET \
                --url "http://localhost:30080/runtimes?page=$PAGE" \
                --header 'Content-Type: application/json' \
                --header 'X-Broker-API-Version: 2.16' > /dev/null
              END=$(date +%s%3N)
              ELAPSED=$((END - START))
              TOTAL_TIME=$((TOTAL_TIME + ELAPSED))
              if (( ELAPSED > MAX_TIME )); then
                MAX_TIME=$ELAPSED
              fi
            done
            AVG_TIME=$((TOTAL_TIME / pages))

            echo "| $num_instances | $AVG_TIME ms | $MAX_TIME ms |" >> $GITHUB_STEP_SUMMARY
          }

          # 1k
          fetch_and_measure 1000 10

          # 10k
          for i in {1..9}; do
            PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql
          done
          fetch_and_measure 10000 100

          # 100k
          for i in {1..90}; do
            PGPASSWORD=$DB_PASS psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -f resources/installation/migrations/populate_performance_tests_database.up.sql
          done
          fetch_and_measure 100000 100

          echo "</div>" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          if [[ "$SUCCESS_RATE" != "100" ]]; then
            echo "Error: SUCCESS_RATE is $SUCCESS_RATE, expected 100"
            exit 1
          fi

      - name: Fetch metrics
        run: scripts/generate_charts.sh